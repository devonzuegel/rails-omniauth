diff --git i/app/helpers/account_helper.rb w/app/helpers/account_helper.rb
index bc74b77..ad96c71 100644
--- i/app/helpers/account_helper.rb
+++ w/app/helpers/account_helper.rb
@@ -2,7 +2,8 @@ module AccountHelper
 
   def theme
     default_theme = Account.themes.first
-    if current_user && current_user.account
+    # puts current_user.blank? ? "nil" : current_user
+    if current_user != nil && current_user.account
       user_theme = current_user.account.theme
       !!(Account.themes.index user_theme) ? user_theme : default_theme
     else 
diff --git i/spec/features/accounts/update_account_spec.rb w/spec/features/accounts/update_account_spec.rb
index 91c3ecf..d3d2ebe 100644
--- i/spec/features/accounts/update_account_spec.rb
+++ w/spec/features/accounts/update_account_spec.rb
@@ -13,7 +13,7 @@ feature 'Update account settings', :omniauth do
     # When I go to my account
     # Then I can view and update settings
   scenario "user can view & update their account settings" do
-    signin
+    sign_in_feature
     visit @account_form[:path]
     expect(page).to have_content("Your Account")
   end
@@ -32,7 +32,7 @@ feature 'Update account settings', :omniauth do
     # When I update my account with a nil name
     # Then that field is updated with nil
   scenario "user can give nil first_name or last_name" do
-    signin
+    sign_in_feature
     expect(current_user).to have_attributes( auth_mock_hash['info'] )
     details = {
       name: "account[user_attributes]", 
@@ -48,7 +48,7 @@ feature 'Update account settings', :omniauth do
     # When I update my account with a blank name
     # Then that field is updated with nil
   scenario "user can give blank first_name or last_name" do
-    signin
+    sign_in_feature
     expect(current_user).to have_attributes( auth_mock_hash['info'] )
     details = {
       name: "account[user_attributes]", 
@@ -77,7 +77,7 @@ feature 'Update account settings', :omniauth do
     # When I go to account settings, change the theme, and save
     # Then my theme is changed and I see the theme I chose
   scenario "user can update his/her theme" do 
-    signin
+    sign_in_feature
     Account.themes.each do |theme|
       visit @account_form[:path]
       select theme, from: "account[theme]"
@@ -91,7 +91,7 @@ feature 'Update account settings', :omniauth do
     # When I click a theme in the dropdown
     # Then I see a preview of that theme
   scenario "user can view preview of theme on click", js: true do 
-    signin
+    sign_in_feature
     sleep 1 # TODO: replace with wait_for_ajax method!!!!!
     
     Account.themes.each do |theme|
diff --git i/spec/features/entries/create_entry_spec.rb w/spec/features/entries/create_entry_spec.rb
index 2a62090..22b206e 100644
--- i/spec/features/entries/create_entry_spec.rb
+++ w/spec/features/entries/create_entry_spec.rb
@@ -23,7 +23,7 @@ feature "Create new entry from home page", :omniauth do
     # When I enter a title and click "Start writing"
     # Then I go to the freewrite page
   scenario "signed-in user can create an entry" do
-    signin
+    sign_in_feature
     create_valid_entry
   end
 
diff --git i/spec/features/users/sign_in_spec.rb w/spec/features/users/sign_in_spec.rb
index dd95d4d..7d0363e 100644
--- i/spec/features/users/sign_in_spec.rb
+++ w/spec/features/users/sign_in_spec.rb
@@ -10,7 +10,7 @@ feature 'Sign in', :omniauth do
   #   When I sign in
   #   Then I see a success message
   scenario "user can sign in with valid account" do
-    signin
+    sign_in_feature
     expect(page).to have_content("Sign out")
   end
 
diff --git i/spec/features/users/sign_out_spec.rb w/spec/features/users/sign_out_spec.rb
index deaf5f6..1a26e3f 100644
--- i/spec/features/users/sign_out_spec.rb
+++ w/spec/features/users/sign_out_spec.rb
@@ -9,7 +9,7 @@ feature 'Sign out', :omniauth do
   #   When I sign out
   #   Then I see a signed out message
   scenario 'user signs out successfully' do
-    signin
+    sign_in_feature
     click_link 'Sign out'
     expect(page).to have_content 'Signed out'
   end
diff --git i/spec/models/entry_spec.rb w/spec/models/entry_spec.rb
index d717b5b..748aa1f 100644
--- i/spec/models/entry_spec.rb
+++ w/spec/models/entry_spec.rb
@@ -23,9 +23,9 @@ RSpec.describe Entry, type: :model do
   end
 
   it "should be invalid with a blank or nil title" do
-    expect(FactoryGirl.build(:entry, title: nil)).to_not be_valid
-    expect(FactoryGirl.build(:entry, title: "")).to_not be_valid
-    expect(FactoryGirl.build(:entry, title: "   ")).to_not be_valid
+    expect(FactoryGirl.build :entry, title: nil   ).to_not be_valid
+    expect(FactoryGirl.build :entry, title: ""    ).to_not be_valid
+    expect(FactoryGirl.build :entry, title: "   " ).to_not be_valid
   end
 
 end
diff --git i/spec/routing/routes_spec.rb w/spec/routing/routes_spec.rb
index 201abe5..e5d2a8d 100644
--- i/spec/routing/routes_spec.rb
+++ w/spec/routing/routes_spec.rb
@@ -1,13 +1,42 @@
 describe "Routes" do
   it "get /" do
-    expect(get: root_path).to route_to( controller: "visitors",
-                                        action:     "index" )
+    expect(get: root_path).to route_to({ controller: "visitors", action: "index" })
   end
 
+  it "get /"
   # expect(get: create_).to route_to(
   #   :controller => "articles"
   # )
 
   it "gets all other routes, too"
   it "redirects bad routes to 404"
+
+
+=begin 
+         Prefix Verb   URI Pattern                        Controller#Action
+-----------------------------------------------------------------------------------
+        account POST   /account(.:format)                 accounts#create
+    new_account GET    /account/new(.:format)             accounts#new
+   edit_account GET    /account/edit(.:format)            accounts#edit
+                GET    /account(.:format)                 accounts#show
+                PATCH  /account(.:format)                 accounts#update
+                PUT    /account(.:format)                 accounts#update
+                DELETE /account(.:format)                 accounts#destroy
+freewrite_entry GET    /entries/:id/freewrite(.:format)   entries#freewrite
+        entries GET    /entries(.:format)                 entries#index
+                POST   /entries(.:format)                 entries#create
+      new_entry GET    /entries/new(.:format)             entries#new
+     edit_entry GET    /entries/:id/edit(.:format)        entries#edit
+          entry GET    /entries/:id(.:format)             entries#show
+                PATCH  /entries/:id(.:format)             entries#update
+                PUT    /entries/:id(.:format)             entries#update
+                DELETE /entries/:id(.:format)             entries#destroy
+           root GET    /                                  visitors#index
+                GET    /auth/:provider/callback(.:format) sessions#create
+         signin GET    /signin(.:format)                  sessions#new
+        signout GET    /signout(.:format)                 sessions#destroy
+   auth_failure GET    /auth/failure(.:format)            sessions#failure
+           page GET    /pages/*id                         high_voltage/pages#show
+-----------------------------------------------------------------------------------
+=end
 end
\ No newline at end of file
diff --git i/spec/support/helpers/omniauth.rb w/spec/support/helpers/omniauth.rb
index 56c3606..e909019 100644
--- i/spec/support/helpers/omniauth.rb
+++ w/spec/support/helpers/omniauth.rb
@@ -29,21 +29,14 @@ module Omniauth
   end
 
   module SessionHelpers
-    def signin
+    def sign_in_feature
       visit root_path
       expect(page).to have_content %r"Sign in"i
       auth_mock
       click_link "Sign in"
-      @current_user = User.where( provider: auth_mock['provider'],
-                                  uid:      auth_mock['uid'].to_s ).first
-    end
-
-    def current_user
-      User.find(@current_user.id) if @current_user
-    end
-
-    def signed_in?
-      !!current_user
+      current_user = User.where( provider: auth_mock['provider'],
+                                 uid:      auth_mock['uid'].to_s ).first
+      session[:user_id] = current_user.id
     end
   end
 
diff --git i/spec/support/helpers/utils.rb w/spec/support/helpers/utils.rb
index 4aa29f8..d9f4f23 100644
--- i/spec/support/helpers/utils.rb
+++ w/spec/support/helpers/utils.rb
@@ -5,7 +5,7 @@
   #   submit_value: "Save"
   # })
 def fill_form_and_save hash
-  signin if hash[:signed_in] && !signed_in?
+  sign_in_feature if hash[:signed_in] && !signed_in?
   visit hash[:path]
   hash[:attributes].each do |key, val|
     fill_in "#{hash[:name]}[#{key}]", with: val
@@ -27,4 +27,14 @@ def sign_in
   @account = @user.account
   session[:user_id] = @user.id
   expect(session[:user_id]).not_to be_nil
+end
+
+
+def current_user
+  # User.find(@current_user.id) if @current_user
+  User.find(session[:user_id]) if session
+end
+
+def signed_in?
+  !!current_user
 end
\ No newline at end of file
